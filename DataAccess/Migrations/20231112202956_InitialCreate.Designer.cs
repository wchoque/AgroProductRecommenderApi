// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppCentroEstudiosDBContext))]
    [Migration("20231112202956_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CourseBySemester");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEnroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseBySemesterId")
                        .HasColumnType("int");

                    b.Property<int>("UserByTypeStudentId")
                        .HasColumnType("int");

                    b.Property<int>("UserByTypeTeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseBySemesterId");

                    b.HasIndex("UserByTypeStudentId");

                    b.HasIndex("UserByTypeTeacherId");

                    b.ToTable("CourseBySemesterEnroll");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseBySemesterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WeightPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseBySemesterId");

                    b.ToTable("CourseBySemesterEvaluation");
                });

            modelBuilder.Entity("DataAccess.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseBySemesterEnrollId")
                        .HasColumnType("int");

                    b.Property<int>("CourseBySemesterEvaluationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseBySemesterEnrollId");

                    b.HasIndex("CourseBySemesterEvaluationId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("DataAccess.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserByTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserByTypeId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("DataAccess.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseBySemesterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourseBySemesterId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DataAccess.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserInformationId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserByType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserByType");
                });

            modelBuilder.Entity("DataAccess.Models.UserInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dni")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.ToTable("UserInformation");
                });

            modelBuilder.Entity("DataAccess.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemester", b =>
                {
                    b.HasOne("DataAccess.Models.Course", "Course")
                        .WithMany("CourseBySemesters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__CourseByS__Cours__3587F3E0");

                    b.HasOne("DataAccess.Models.Semester", "Semester")
                        .WithMany("CourseBySemesters")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_CourseBySemester_Semester")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEnroll", b =>
                {
                    b.HasOne("DataAccess.Models.CourseBySemester", "CourseBySemester")
                        .WithMany("CourseBySemesterEnrolls")
                        .HasForeignKey("CourseBySemesterId")
                        .HasConstraintName("FK_CourseBySemesterEnroll_CourseBySemester")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.UserByType", "UserByTypeStudent")
                        .WithMany("CourseBySemesterEnrollUserByTypeStudents")
                        .HasForeignKey("UserByTypeStudentId")
                        .HasConstraintName("FK_CourseBySemesterEnroll_UserByTypeStudent")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.UserByType", "UserByTypeTeacher")
                        .WithMany("CourseBySemesterEnrollUserByTypeTeachers")
                        .HasForeignKey("UserByTypeTeacherId")
                        .HasConstraintName("FK_CourseBySemesterEnroll_UserByTypeTeacher")
                        .IsRequired();

                    b.Navigation("CourseBySemester");

                    b.Navigation("UserByTypeStudent");

                    b.Navigation("UserByTypeTeacher");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEvaluation", b =>
                {
                    b.HasOne("DataAccess.Models.CourseBySemester", "CourseBySemester")
                        .WithMany("CourseBySemesterEvaluations")
                        .HasForeignKey("CourseBySemesterId")
                        .HasConstraintName("FK_CourseBySemesterEvaluation_CourseBySemester")
                        .IsRequired();

                    b.Navigation("CourseBySemester");
                });

            modelBuilder.Entity("DataAccess.Models.Note", b =>
                {
                    b.HasOne("DataAccess.Models.CourseBySemesterEnroll", "CourseBySemesterEnroll")
                        .WithMany("Notes")
                        .HasForeignKey("CourseBySemesterEnrollId")
                        .HasConstraintName("FK_Note_CourseBySemesterEnroll")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.CourseBySemesterEvaluation", "CourseBySemesterEvaluation")
                        .WithMany("Notes")
                        .HasForeignKey("CourseBySemesterEvaluationId")
                        .HasConstraintName("FK_Note_CourseBySemesterEvaluation")
                        .IsRequired();

                    b.Navigation("CourseBySemesterEnroll");

                    b.Navigation("CourseBySemesterEvaluation");
                });

            modelBuilder.Entity("DataAccess.Models.Post", b =>
                {
                    b.HasOne("DataAccess.Models.UserByType", "UserByType")
                        .WithMany("Posts")
                        .HasForeignKey("UserByTypeId")
                        .HasConstraintName("FK_Post_UserByType")
                        .IsRequired();

                    b.Navigation("UserByType");
                });

            modelBuilder.Entity("DataAccess.Models.Schedule", b =>
                {
                    b.HasOne("DataAccess.Models.CourseBySemester", "CourseBySemester")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseBySemesterId")
                        .HasConstraintName("FK_Schedule_CourseBySemester")
                        .IsRequired();

                    b.Navigation("CourseBySemester");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.HasOne("DataAccess.Models.UserInformation", "UserInformation")
                        .WithMany("Users")
                        .HasForeignKey("UserInformationId")
                        .HasConstraintName("FK_User_UserInformation")
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("DataAccess.Models.UserByType", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserByTypes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserByType_User")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.UserType", "UserType")
                        .WithMany("UserByTypes")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_UserByType_UserType")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("DataAccess.Models.Course", b =>
                {
                    b.Navigation("CourseBySemesters");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemester", b =>
                {
                    b.Navigation("CourseBySemesterEnrolls");

                    b.Navigation("CourseBySemesterEvaluations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEnroll", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DataAccess.Models.CourseBySemesterEvaluation", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DataAccess.Models.Semester", b =>
                {
                    b.Navigation("CourseBySemesters");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Navigation("UserByTypes");
                });

            modelBuilder.Entity("DataAccess.Models.UserByType", b =>
                {
                    b.Navigation("CourseBySemesterEnrollUserByTypeStudents");

                    b.Navigation("CourseBySemesterEnrollUserByTypeTeachers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DataAccess.Models.UserInformation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Models.UserType", b =>
                {
                    b.Navigation("UserByTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
